#! /usr/bin/env python

import subprocess
import re
import os
import os.path
import time

TOP = os.path.realpath(os.path.join(os.path.dirname(os.path.abspath(__file__)),
                                    "../.."))

def debian_version():
    """Check to see if we are in a debian build; if so,
    return a tuple of:
                - the version
                - the upstream source rev tag
                - the ubuntu resource directory"""
    ctl = os.path.join(TOP,"debian/changelog")
    if os.path.exists(ctl):
        p = subprocess.Popen(["dpkg-parsechangelog", "-c1"],
                             cwd=TOP,
                             stdout=subprocess.PIPE)
        data = p.stdout.read()
        p.wait()
        ver = re.search(r"Version:\s+([^\s]+)$", data, re.MULTILINE)
        ver = ver.group(1)
        # Rescan from the beginning of this upstream version, since
        # multiple packaging-layer changes may have happened and the
        # commit message is most likely on the first one
        upver = ver.split('-')[0]
        p = subprocess.Popen(["dpkg-parsechangelog", "-f%s" % upver],
                             cwd=TOP,
                             stdout=subprocess.PIPE)
        data2 = p.stdout.read()
        src = re.search(r"commit\s+([0-9a-f]{40})", data2, re.MULTILINE)
        # If we are running in Jenkins, append the Jenkins build #
        if 'BUILD_NUMBER' in os.environ:
            ver += "." + os.environ['BUILD_NUMBER']
        if src:
            return (ver, 
                    src.group(1),
                    "/usr/share/games/hexplore")
        else:
            return (ver, 
                    "unknown",
                    "/usr/share/games/hexplore")
    return None

def upstream_repo_version():
     """Return a tuple of:
                - the version
                - the source rev tag
                - the default home directory"""
     p = subprocess.Popen(["git", "rev-parse", "HEAD"],
                          stdout=subprocess.PIPE)
     rev = p.stdout.read().strip()
     p.wait()
     return (open(os.path.join(TOP,"version")).read().strip(), 
             rev,
             ".")

def main():
    ver, rev, dhome = debian_version() or upstream_repo_version()
    t = time.time()
    tstr = time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime(t))
    print "const char *build_date = \"%s\";" % tstr
    print "const char *build_source_rev = \"%s\";" % rev
    print "const char *build_version = \"%s\";" % ver
    print "const char *build_default_home = \"%s\";" % dhome

main()

#   User agent "hexplore/native 0.3.2-2 2014-03-02T05:15:33Z unknown"
